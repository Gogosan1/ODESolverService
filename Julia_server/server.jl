using DifferentialEquations, AMQPClient, Symbolics, JSON #, Libc

# üîπ –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –ø–æ —Å—Ç—Ä–æ–∫–µ
function get_solver(method_name)
    if method_name == "euler"
        return Euler()
    elseif method_name == "rk4"
        return RK4()
    elseif method_name == "dp5"
        return DP5()
    elseif method_name == "vern7"
        return Vern7()
    elseif method_name == "vern9"
        return Vern9()
    elseif method_name == "rosenbrock23"
        return Rosenbrock23()
    elseif method_name == "rodas5"
        return Rodas5()
    elseif method_name == "rodas4"
        return Rodas4()
    elseif method_name == "trbdf2"
        return TRBDF2()
    elseif method_name == "implicit_euler"
        return ImplicitEuler()
    elseif method_name == "ken_carp4"
        return KenCarp4()
    elseif method_name == "ken_carp5"
        return KenCarp5()
    elseif method_name == "ken_carp10"
        return KenCarp10()
    elseif method_name == "radau_iia5"
        return RadauIIA5()
    elseif method_name == "ab4"
        return AB4()
    elseif method_name == "bs3"
        return BS3()
    elseif method_name == "qn_df"
        return QNDF()
    elseif method_name == "kvaerno5"
        return Kvaerno5()
    elseif method_name == "rodas23"
        return Rodas23()
    elseif method_name == "fbdf"
        return FBDF()
    elseif method_name == "ida"
        return IDA()
    elseif method_name == "dassl"
        return DASSL()
    elseif method_name == "em"
        return EM()
    elseif method_name == "sriw1"
        return SRIW1()
    elseif method_name == "sra1"
        return SRA1()
    elseif method_name == "toms748"
        return TOMS748()
    elseif method_name == "simple_diff_eq"
        return SimpleDiffEq()
    else
        return Tsit5()  # üöÄ –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –º–µ—Ç–æ–¥ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)
    end
end

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –û–î–£
function solve_ode(task::Dict)
    try
        y0 = Float64.(task["initial_conditions"])
        tspan = (task["t_start"], task["t_end"])
        h0 = task["h0"]
        accuracy = task["accuracy"]

        # –í—ã–±–∏—Ä–∞–µ–º —á–∏—Å–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        method = get_solver(task["method"])

        function f(dy, y, p, t)
            equations = task["equations"]

            # –°–æ–∑–¥–∞—ë–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –æ–¥–Ω–æ–º —Ü–∏–∫–ª–µ
            substitution_dict = Dict()
            for i in eachindex(y)
                var = Symbolics.variable(Symbol("y$i"))
                substitution_dict[var] = y[i]
            end

            for (i, eq) in enumerate(equations)
                # –ü–∞—Ä—Å–∏–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                parsed_eq = Symbolics.parse_expr_to_symbolic(Meta.parse(eq), Main)

                # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ
                substituted = Symbolics.substitute(parsed_eq, substitution_dict)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ
                evaluated = Symbolics.value(substituted)

                dy[i] = evaluated
            end
        end


        prob = ODEProblem(f, y0, tspan)

        sol = solve(prob, method, reltol=accuracy, dt=h0)

        # return Dict(
        #     "taskId" => task["taskId"],
        #     "solution" => [Dict("t" => t, "y" => y) for (t, y) in zip(sol.t, sol.u)]
        # )
        result = Dict(
            "taskId" => task["taskId"],
            "solution" => [
                Dict("t" => t, "y" => y) for (t, y) in zip(sol.t, sol.u)
            ]
        )
        return JSON.json(result)

    catch e
        return Dict("taskId" => task["taskId"], "error" => "–û—à–∏–±–∫–∞ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö", "details" => string(e))
    end
end

# üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ
port = parse(Int, ENV["RABBITMQ_PORT"])#AMQPClient.AMQP_DEFAULT_PORT
login = ENV["RABBITMQ_USERNAME"]  # –õ–æ–≥–∏–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "guest"
password = ENV["RABBITMQ_PASSWORD"]  # –ü–∞—Ä–æ–ª—å, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "guest"
REQUEST_QUEUE = ENV["JULIA_QUEUE"]
RESPONSE_QUEUE = ENV["RESPONSE_QUEUE"]
host = ENV["RABBITMQ_HOST"]
println(host)

auth_params = Dict{String,Any}("MECHANISM" => "AMQPLAIN", "LOGIN" => login, "PASSWORD" => password)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ
conn = connection(; virtualhost="/", host=host, port=port, auth_params=auth_params)

channel1 = channel(conn, AMQPClient.UNUSED_CHANNEL, true)

AMQPClient.queue_declare(channel1, REQUEST_QUEUE, durable=true)
AMQPClient.queue_declare(channel1, RESPONSE_QUEUE, durable=true)


println("‚úÖ Julia —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç juliaQueue...")

function process_message(msg)
    try
        if msg !== nothing
            task = JSON.parse(String(msg.data))
            println("üì© –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: ", task)

            # –†–µ—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É –û–î–£
            result = solve_ode(task)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            println("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ responseQueue")
            data = convert(Vector{UInt8}, codeunits(result))
            msg1 = Message(data)
            basic_publish(channel1, msg1; routing_key=RESPONSE_QUEUE)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            basic_ack(channel1, msg.delivery_tag)
            #else
            #println("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        end
    catch e
        println("‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ", e)
    end
end

# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
basic_consume(channel1, REQUEST_QUEUE, process_message)

while true
    sleep(0.5)
end

# json_input = """
# {
#   "equations": ["y1", "-100*y2"],
#   "initial_conditions": [1.0, 1.0],
#   "h0": 0.1,
#   "t_start": 0.0,
#   "t_end": 1.0,
#   "accuracy": 1e-8,
#   "method": "rodas5",
#   "taskId": "1",
#   "jacobi_matrix": [[1.0, 0.0], [0.0, -100.0]]
# }
# """
